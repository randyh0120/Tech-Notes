Clean Code Principles:

- Keep code small and concise
- Code should follow the SOLID principles

- S : single responsibility principle
  A class should have one, and only one, reason to change.

- O : open-closed principle
  You should be able to extend a classâ€™s behavior without modifying it.

- L : Liskov substitution principle
  If for each object O1 of type S there is an object O2 of type T such that for all programs P defined in terms of T, the behavior of P is unchanged when O1 is substituted for O2 then S is a subtype of T.

- I : interface segregation principle
  Make fine grained interfaces that are client-specific. Clients should not be forced to implement interfaces they do not use.

- D : dependency inversion principle
  Depend on abstractions, not on concretions.
  High level modules should not depend upon low level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend upon abstractions.
